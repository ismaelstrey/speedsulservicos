// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Define o modelo para a tabela Empresa
model Empresa {
  id                    Int                   @id @default(autoincrement())
  abertura              DateTime
  situacao              String
  tipo                  String
  nome                  String
  porte                 String
  naturezaJuridica      String                @map("natureza_juridica")
  atividadePrincipal    AtividadePrincipal[]
  qsa                   QSA[]
  logradouro            String
  numero                String
  municipio             String
  bairro                String
  uf                    String
  cep                   String
  email                 String
  telefone              String
  dataSituacao          DateTime              @map("data_situacao")
  cnpj                  String                @unique
  ultimaAtualizacao     DateTime              @map("ultima_atualizacao")
  status                String
  fantasia              String?
  complemento           String?
  efr                   String?
  motivoSituacao        String?               @map("motivo_situacao")
  situacaoEspecial      String?               @map("situacao_especial")
  dataSituacaoEspecial  DateTime?             @map("data_situacao_especial")
  atividadesSecundarias AtividadeSecundaria[]
  capitalSocial         String
  extra                 String
  Billing               Billing[]
}

// Define o modelo para a tabela AtividadePrincipal
model AtividadePrincipal {
  id        Int     @id @default(autoincrement())
  code      String
  text      String
  empresa   Empresa @relation(fields: [empresaId], references: [id])
  empresaId Int
}

// Define o modelo para a tabela QSA (Quadro de Sócios e Administradores)
model QSA {
  id        Int     @id @default(autoincrement())
  nome      String
  qual      String
  empresa   Empresa @relation(fields: [empresaId], references: [id])
  empresaId Int
}

// Define o modelo para a tabela AtividadeSecundaria
model AtividadeSecundaria {
  id        Int     @id @default(autoincrement())
  code      String
  text      String
  empresa   Empresa @relation(fields: [empresaId], references: [id])
  empresaId Int
}

// Define o modelo para a tabela Billing
model Billing {
  id        Int     @id @default(autoincrement())
  free      Boolean
  database  Boolean
  empresa   Empresa @relation(fields: [empresaId], references: [id])
  empresaId Int
}

// Modelo para o tipo de serviço
model ServiceType {
  id      Int       @id @default(autoincrement())
  name    String
  Service Service[]
}

// Modelo para o tipo de serviço
model Especialidades {
  id       Int        @id @default(autoincrement())
  name     String
  MainUser MainUser[]
}

// Modelo para o usuário
model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  firstName String
  lastName  String
  bio       String?
  avatar    String?
  email     String     @unique
  password  String
  service   Service    @relation(fields: [serviceId], references: [id])
  serviceId Int
  MainUser  MainUser[]
}

// Modelo para o serviço oferecido
model Service {
  id          Int          @id @default(autoincrement())
  title       String?
  subtitle    String?
  description String?
  job         String?
  status      Boolean      @default(true)
  type        ServiceType? @relation(fields: [typeId], references: [id])
  typeId      Int?
  views       Int          @default(0)
  link        String?
  image       String?
  icon        String?
  rate        Float        @default(0)
  city        String?
  bairro      String?
  address     String?
  obs         String?
  number      String?
  User        User[]
}

// Modelo para o contato do usuário
model Contact {
  id       Int        @id @default(autoincrement())
  email    String
  telefone String
  MainUser MainUser[]
}

// Modelo para o portfólio do usuário
model Portfolio {
  id         Int       @id @default(autoincrement())
  projeto    String
  cliente    String
  resultado  String
  MainUser   MainUser? @relation(fields: [mainUserId], references: [id])
  mainUserId Int?
}

// Modelo para o usuário principal
model MainUser {
  id               Int            @id @default(autoincrement())
  avatar           String?
  descricao        String?
  star             Int?
  nome             String?
  profissao        String?
  experiencia      String?
  especialidades   Especialidades @relation(fields: [especialidadesId], references: [id])
  user             User?          @relation(fields: [userId], references: [id])
  contato          Contact?       @relation(fields: [contactId], references: [id])
  portfolio        Portfolio[]
  userId           Int
  contactId        Int
  especialidadesId Int
}
